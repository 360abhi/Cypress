
Step-by-Step Documentation
1. Create Cypress Tests
You created Cypress tests for your project. This involves:
    • Writing test cases in the cypress/e2e directory.
    • Adding necessary dependencies in package.json.
2. Create a Dockerfile for Cypress Tests
You created a Dockerfile to containerize your Cypress tests. Here’s an example Dockerfile
# Use an official Node.js runtime as the base image
FROM node:18-bullseye

# Set the working directory inside the container
WORKDIR /app

# Install system dependencies required for Cypress and browsers
RUN apt-get update && \
    apt-get install -y \
    libgtk2.0-0 \
    libgtk-3-0 \
    libgbm-dev \
    libnotify-dev \
    libgconf-2-4 \
    libnss3 \
    libxss1 \
    libasound2 \
    libxtst6 \
    xauth \
    xvfb \
    # Clean up to reduce image size
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy package.json and package-lock.json (or yarn.lock)
COPY package*.json ./

# Install Node.js dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Run Cypress tests
CMD ["npx", "cypress", "run"]


Build the Docker image: 
docker build -t notmynameab/cypress_test:latest .

3. Create a Jenkins Image with Docker CLI Installed
You created a custom Jenkins image with Docker CLI installed. Here’s how:
# Use the official Jenkins LTS image as the base image
FROM jenkins/jenkins:lts

# Switch to root user to install Docker
USER root

# Install Docker CLI
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

RUN apt-get update && apt-get install -y docker-ce-cli




----------
Run jenkins image
docker run -d \
  --name jenkins \
  -p 8080:8080 \
  -p 50000:50000 \
  -v jenkins_home:/var/jenkins_home \
  -v /var/run/docker.sock:/var/run/docker.sock \
  custom-jenkins:latest

Push cypress image to docker hub
docker tag notmynameab/cypress_test:latest notmynameab/cypress_test:latest
docker push notmynameab/cypress_test:latest

open jenkins localhost and create a job
configure pipeline:
pipeline {
    agent any

    stages {
        stage('Pull Cypress Docker Image') {
            steps {
                script {
                    // Pull the Docker image from Docker Hub
                    sh 'docker pull notmynameab/cypress_test:latest'
                }
            }
        }

        stage('Run Cypress Tests') {
            steps {
                script {
                    // Run the Cypress tests inside the Docker container
                    sh 'docker run --rm notmynameab/cypress_test:latest npx cypress run'
                }
            }
        }

        stage('Archive Test Results') {
            steps {
                // Archive the test results (if applicable)
                archiveArtifacts artifacts: '**/cypress/reports/**/*', allowEmptyArchive: true
            }
        }
    }
}

-------------------
Alternative
pipeline {
    agent any

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm // Checks out the code from GitHub
            }
        }

        stage('Run Cypress Tests') {
            agent {
                docker {
                    image 'cypress/included:12.17.0' // Official Cypress image
                    args '-v $WORKSPACE:/app' // Mount the workspace
                }
            }
            steps {
                sh '''
                    cd /app
                    npm install # Install dependencies
                    npx cypress run # Run Cypress tests
                '''
            }
        }

        stage('Archive Test Results') {
            steps {
                archiveArtifacts artifacts: 'cypress/reports/**/*', allowEmptyArchive: true
            }
        }
    }
}


=========Notes:
+---------------------------+
| Cypress Test Runner       |  🖥️ Runs inside the browser
| - Executes commands       |
| - Hooks into DOM          |
| - Listens to events       |
+---------------------------+
         ⬇️ WebSocket Communication
+---------------------------+
| Cypress Backend (Node.js) |  💻 Runs outside the browser
| - Handles files, logging  |
| - Manages configs         |
| - Runs external plugins   |
+---------------------------+

Cypress commands (cy.visit(), cy.get(), etc.) are asynchronous, but Cypress does not use JavaScript promises directly. Instead, Cypress has its own command queue that ensures commands run in order.
Cypress commands don’t return values immediately like promises. Instead, Cypress automatically chains commands together.

We can use object destructuring while passing parameters in function where we want to pass in our order not the default one.

✅ Cypress Basics
Cypress Setup:

Installed Cypress and configured it with Node.
Familiarized with Cypress UI (npx cypress open).
Cypress Configuration: You learned how to set configurations like video recording and screenshots in the cypress.config.js file.
Cypress Commands:

describe and it blocks to structure tests.
Common Cypress commands like cy.visit(), cy.get(), cy.click(), and cy.type().
Understanding the Chai assertions (.should(), .contains(), .be.visible, etc.).
Running Tests:

Running tests using npx cypress run in headless mode.
Running a specific test file with --spec.
Running tests in headed mode (--headed).
Enabling video recording (--video).
Generate Mochawesome reports.
Running tests with custom configuration like baseUrl, timeouts, retries, etc.
Page Object Model (POM):

Created POM classes to structure your tests by defining elements (XPath or CSS selectors) and actions (methods).
Used the export default pattern for sharing classes and calling methods from the test scripts.
Troubleshooting:

Handled issues like element visibility and commands that sometimes failed to find elements.
Understood how to deal with waiting for elements and timeouts.
Test Reports & Screenshots:

You learned how to enable screenshots and videos for every test run.
Configured test reporting with the Mochawesome reporter.
✅ Key Cypress Commands Reviewed:
npx cypress open — Opens the Cypress UI.
npx cypress run — Runs tests in headless mode.
npx cypress run --spec "path/to/test-file.cy.js" — Runs a specific test file.
npx cypress run --headed — Runs tests in headed mode.
cy.get('selector') — Retrieves DOM elements.
cy.click() — Clicks on elements.
cy.type() — Types into form fields.
cy.visit() — Navigates to a webpage.
cy.xpath() — Queries elements using XPath (with cypress-xpath plugin).
cy.should() — Used for assertions (e.g., visibility checks).
cy.screenshot() — Takes a screenshot.
cy.wait() — Waits for elements or network requests.
What You’ve Mastered So Far:
Basic structure of Cypress tests.
How to interact with elements and assert conditions.
Setting up configuration options like videos, reports, and screenshots.
Using Page Object Model (POM) to manage test scripts effectively.
Running tests with specific configurations like --headed, --spec, and enabling video and report generation.
Understanding Cypress architecture and test execution flow.

BEFORE EACH: runs before every test
beforeEach() is a hook in Cypress that allows you to run some code before each test (it) in a test suite (describe). It’s commonly used to set up preconditions or repeat actions that you want to perform before every test.

describe('Login Tests', () => {
  // This will run before each test
  beforeEach(() => {
    cy.visit('https://example.com/login');  // Visit the login page
    cy.get('input[name="username"]').type('validUser');  // Type username
    cy.get('input[name="password"]').type('validPass');  // Type password
    cy.get('button[type="submit"]').click();  // Click login
  });

  it('should login successfully', () => {
    cy.url().should('include', '/dashboard');  // Assert that the URL includes 'dashboard'
  });

  it('should show the user dashboard', () => {
    cy.get('.dashboard').should('be.visible');  // Assert that the dashboard is visible
  });
});




🔹 Understanding cy.task() in Cypress
cy.task() is used to execute Node.js code outside of the browser environment.
Cypress runs tests inside the browser, but sometimes we need to:
✅ Read/write files (e.g., JSON, CSV, logs)
✅ Connect to a database
✅ Execute shell commands
✅ Call external APIs before or after tests
🔹 How it Works
You define a task function inside setupNodeEvents() in cypress.config.js.
Inside your test file (.cy.js), you call cy.task('taskName'), and Cypress runs it in Node.js (outside the browser).
The result is returned as a Promise, so you must use .then() to handle it.



🔥 Final Summary
Scenario	Cypress Command Needed?	Why?
cy.get('.title').invoke('text')	❌ No wrap needed	cy.get() returns a jQuery object, which supports .invoke().
cy.get('.title').each(el => el.invoke('text'))	❌ Will fail	el is a raw DOM element (not a Cypress command).
cy.get('.title').each(el => cy.wrap(el).invoke('text'))	✅ Wrap needed	cy.wrap(el) converts el into a Cypress command, making .invoke() work.


API ---------------->
The API is slow or unreliable.
You don’t want to hit a real backend while testing.
You need to test edge cases (e.g., server errors).

Mocking:
Replacing an actual API response with a fake response.
Helps in testing frontend behavior without depending on the real backend.
Stubbing:
Intercepting a network request and replacing it with custom data.
Can simulate different API scenarios like success, failure, or delays.

Parameters:
Parameter	Description	Example
method:	The HTTP method to intercept (GET, POST, PUT, DELETE, etc.).	'GET', 'POST'
url:	The API endpoint (can be full or partial match using wildcards).	'/api/users', '*api*'
response:	The mock response, can be an object ({}) or a function (req) => {}	{statusCode: 200, body: { name: 'John' } }


 Summary: What Can cy.intercept() Do?
✅ Mock API Responses → Return custom responses without calling the real server.
✅ Simulate API Failures → Test how UI handles 500, 400, or timeout errors.
✅ Modify Requests Dynamically → Change request/response data in real-time.
✅ Test Slow Networks → Simulate delay using setDelay().
✅ Intercept and Modify Any HTTP Method → GET, POST, PUT, DELETE, etc.

🚀 This allows Cypress to test frontend behavior without relying on real APIs! 🚀

🔍 req.reply() vs. Direct Response
Approach	Flexibility	When to Use
Direct Response (without a function)	✅ Simple and quick	When the response is always static
req.reply(callback) (with a function)	✅ Dynamic control over response	When you need to modify response based on request details

cy.intercept('GET', '/api/users', (req) => {
    req.reply((res) => {
        res.send({
            statusCode: 200,
            body: [{ id: 1, name: 'John Doe', time: new Date().toISOString() }]
        });
    });
}).as('dynamicUsers');


------------------
req.reply is alwasy used to modify the UI req
for post req sent to server modify use: req.body and send payload to it

---posts-----
When you intercept a POST request and want to inspect the response data, you will always use cy.wait() and then use .then() to access the interception. Here's why:

🎯 Why cy.wait() and then() are used with cy.intercept()
cy.wait(): It's needed to wait for the network request to complete before you proceed with your assertions or any other operations. The @ alias ensures that you're specifically waiting for that request (POST in this case).

.then(): You use this method to handle the interception object returned by the cy.wait(). This allows you to extract and work with interception.response.body or other response data.

deep_equal : inteception.request.body and interception.response.body

@@@@ Assertions in API
1. Status Code Assertions
Verify the HTTP status code (e.g., 200, 201, 400, 401, 404, 500).

2. Response Header Assertions
Check for specific headers (e.g., content-type, authorization).

Verify header values (e.g., application/json, Bearer token).

3. Response Body Assertions
Check if a property exists in the response.

Verify the value of a specific property.

Validate the data type of a property (e.g., string, number, boolean).

Check for nested properties in the response.

Verify the length of an array in the response.

Check if an array contains a specific object.

Validate partial matches in the response body.

Verify if a property value exists in an array.

4. Response Time Assertions
Ensure the response time is within an acceptable limit.

5. Error Response Assertions
Verify error messages in the response.

Check error codes or statuses.

Validate error details or descriptions.

6. Pagination Assertions
Verify pagination properties (e.g., page, pageSize, totalItems).

Check the length of the items array in paginated responses.

7. Schema Validation Assertions
Validate the response structure against a predefined schema.

8. Dynamic Data Assertions
Check if dynamic properties (e.g., IDs, timestamps) exist.

Validate dynamic values against patterns (e.g., email, UUID).

Verify if timestamps are recent or match expected formats.

9. Request Payload Assertions
Verify the request payload sent to the API matches expectations.

10. Query Parameter Assertions
Check if query parameters in the request are correct.

11. Authentication Assertions
Verify authentication headers (e.g., Authorization: Bearer token).

12. Response Size Assertions
Check the size of the response body (e.g., array length, byte size).

13. Empty Response Assertions
Verify if the response body is empty.

--------------------------------
Dynamic URL:

Dynamic URLs are URLs that change based on user input, application state, or database content. Examples include:

URLs with IDs: /products/123

URLs with slugs: /blog/my-first-post

URLs with query parameters: /search?q=cypress

1. Intercepting Dynamic URLs with Wildcards
You can use wildcards (*) in cy.intercept() to match dynamic URLs.

Example Scenario:
You have a dynamic URL like /api/products/123, where 123 is a product ID.

You want to intercept this URL and mock the response.

1. Directly passing the response object inside cy.intercept() without a callback function:
This method is the most straightforward and concise. You can pass the response directly as an object inside the cy.intercept() method without using the req.reply() callback.

2. Using req.reply() and passing the response directly inside the callback:
This method provides more flexibility and allows you to perform custom logic on the request or modify the response before sending it back.

3. Using a callback function inside req.reply() and res.send():
This method is useful if you want more fine-grained control over the response or need to perform asynchronous operations before sending the response. It uses the res.send() method to send the response.

usecase of res.send :
it('Conditional responses based on query params', () => {
    cy.intercept('GET', 'https://example.com/api/items', (req) => {
        const isSpecial = req.query.special === 'true'; // Check for query parameter
        req.reply((res) => {
            if (isSpecial) {
                res.send({
                    statusCode: 200,
                    body: {
                        id: '1',
                        title: 'Special Item',
                        dueDate: "2025-02-09T11:07:29.9358897+00:00",
                        completed: true
                    }
                });
            } else {
                res.send({
                    statusCode: 200,
                    body: {
                        id: '1',
                        title: 'Regular Item',
                        dueDate: "2025-02-09T11:07:29.9358897+00:00",
                        completed: false
                    }
                });
            }
        });
    }).as('dynamic');
});

==============HOOKS
When to Use Each Hook:
    1. before(): Use this when you need to run a piece of code once before any tests are run. Good for global setup (e.g., setting up a database, authenticating, or setting environment variables).
        ◦ Example: Logging in a user before running all tests.
    2. beforeEach(): Use this when you need to set up the environment before each individual test runs. This is useful when each test needs a clean state or specific actions, like visiting a page or clicking an element.
        ◦ Example: Visiting the homepage, resetting state, or clearing cookies before each test.
    3. after(): Use this when you need to perform actions after all tests have completed, such as cleaning up shared resources.
        ◦ Example: Logging out the user, cleaning up test data, or disconnecting from external services after all tests run.
    4. afterEach(): Use this when you need to perform actions after each individual test, such as resetting mock data, clearing session storage, or performing other cleanup tasks.
        ◦ Example: Resetting any changes made during the test, clearing cookies, or verifying UI elements are cleaned up.
describe('My Application Tests', () => {

    before(() => {
        // Run once before all tests
        cy.log('Running global setup');
        // Example: log in or set up initial state for the whole suite
        cy.visit('/');
    });

    beforeEach(() => {
        // Run before each test
        cy.log('Preparing for individual test');
        // Example: reset application state, visit a page, or log in if needed
        cy.clearCookies(); // Clear cookies before each test
        cy.visit('/');
    });

    it('should load the homepage', () => {
        cy.log('Running test 1');
        cy.contains('Welcome to the homepage').should('be.visible');
    });

    it('should check the login functionality', () => {
        cy.log('Running test 2');
        cy.get('button').contains('Login').click();
        cy.url().should('include', '/login');
    });

    afterEach(() => {
        // Run after each test
        cy.log('Running cleanup after each test');
        // Example: Reset state after each test, like clearing data or verifying UI
    });

    after(() => {
        // Run once after all tests
        cy.log('Running final cleanup after all tests');
        // Example: log out, disconnect from services, or clean up external resources
    });

});


/////////////PERSISTING SESSIONS
1. Login Once and Persist Session Across Tests
You can log in once and then use the session (cookies, local storage, or authentication tokens) across multiple tests. This is done by preserving cookies or local storage between tests.
Steps:
    1. Log in once and store the session details (cookies or local storage).
    2. Use Cypress session commands (cy.session()) to persist the login state for subsequent tests.
describe('Persistent Login', () => {

    // Log in once and reuse the session across tests
    beforeEach(() => {
        cy.session('login', () => {
            cy.visit('/login'); // visit the login page
            cy.get('input[name="username"]').type('myusername');
            cy.get('input[name="password"]').type('mypassword');
            cy.get('button[type="submit"]').click(); // submit login form
            // Assuming login redirects to the homepage, we can check if logged in
            cy.url().should('include', '/home'); 
        });
    });

    it('Test 1 - After Login', () => {
        cy.visit('/dashboard');
        cy.contains('Welcome').should('be.visible');
    });

    it('Test 2 - After Login', () => {
        cy.visit('/profile');
        cy.contains('User Profile').should('be.visible');
    });
});

2. Using Cookies for Session Persistence
Cypress can persist cookies across tests by reading the cookies from the first test and using them in subsequent tests. You can manually set cookies or preserve them.
Example:
    1. Login once and save cookies.
    2. In subsequent tests, preserve cookies to maintain the logged-in state.
describe('Persistent Login with Cookies', () => {

    before(() => {
        // Perform login and capture cookies
        cy.visit('/login'); // visit the login page
        cy.get('input[name="username"]').type('myusername');
        cy.get('input[name="password"]').type('mypassword');
        cy.get('button[type="submit"]').click(); // submit login form
        cy.url().should('include', '/home'); // check redirection after login

        // Capture cookies after login
        cy.getCookies().then((cookies) => {
            window.localStorage.setItem('myCookies', JSON.stringify(cookies)); // Store cookies in localStorage
        });
    });

    beforeEach(() => {
        // Retrieve cookies and set them before each test
        const cookies = JSON.parse(window.localStorage.getItem('myCookies'));
        cookies.forEach(cookie => {
            cy.setCookie(cookie.name, cookie.value); // set the cookies
        });
    });

    it('Test 1 - After Login', () => {
        cy.visit('/dashboard');
        cy.contains('Welcome').should('be.visible');
    });

    it('Test 2 - After Login', () => {
        cy.visit('/profile');
        cy.contains('User Profile').should('be.visible');
    });
});